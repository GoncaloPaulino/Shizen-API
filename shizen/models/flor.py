# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from shizen.models.base_model_ import Model
from shizen import util


class Flor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, idx: int=None, common_name: str=None, scientific_name: str=None, label_name: str=None, description: str=None, min_height: float=None, max_height: float=None, more_info: str=None):  # noqa: E501
        """Flor - a model defined in Swagger

        :param idx: The idx of this Flor.  # noqa: E501
        :type idx: int
        :param common_name: The common_name of this Flor.  # noqa: E501
        :type common_name: str
        :param scientific_name: The scientific_name of this Flor.  # noqa: E501
        :type scientific_name: str
        :param label_name: The label_name of this Flor.  # noqa: E501
        :type label_name: str
        :param description: The description of this Flor.  # noqa: E501
        :type description: str
        :param min_height: The min_height of this Flor.  # noqa: E501
        :type min_height: float
        :param max_height: The max_height of this Flor.  # noqa: E501
        :type max_height: float
        :param more_info: The more_info of this Flor.  # noqa: E501
        :type more_info: str
        """
        self.swagger_types = {
            'idx': int,
            'common_name': str,
            'scientific_name': str,
            'label_name': str,
            'description': str,
            'min_height': float,
            'max_height': float,
            'more_info': str
        }

        self.attribute_map = {
            'idx': 'idx',
            'common_name': 'common_name',
            'scientific_name': 'scientific_name',
            'label_name': 'label_name',
            'description': 'description',
            'min_height': 'min_height',
            'max_height': 'max_height',
            'more_info': 'more_info'
        }
        self._idx = idx
        self._common_name = common_name
        self._scientific_name = scientific_name
        self._label_name = label_name
        self._description = description
        self._min_height = min_height
        self._max_height = max_height
        self._more_info = more_info

    @classmethod
    def from_dict(cls, dikt) -> 'Flor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Flor of this Flor.  # noqa: E501
        :rtype: Flor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def idx(self) -> int:
        """Gets the idx of this Flor.


        :return: The idx of this Flor.
        :rtype: int
        """
        return self._idx

    @idx.setter
    def idx(self, idx: int):
        """Sets the idx of this Flor.


        :param idx: The idx of this Flor.
        :type idx: int
        """
        if idx is None:
            raise ValueError("Invalid value for `idx`, must not be `None`")  # noqa: E501

        self._idx = idx

    @property
    def common_name(self) -> str:
        """Gets the common_name of this Flor.


        :return: The common_name of this Flor.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name: str):
        """Sets the common_name of this Flor.


        :param common_name: The common_name of this Flor.
        :type common_name: str
        """
        if common_name is None:
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def scientific_name(self) -> str:
        """Gets the scientific_name of this Flor.


        :return: The scientific_name of this Flor.
        :rtype: str
        """
        return self._scientific_name

    @scientific_name.setter
    def scientific_name(self, scientific_name: str):
        """Sets the scientific_name of this Flor.


        :param scientific_name: The scientific_name of this Flor.
        :type scientific_name: str
        """
        if scientific_name is None:
            raise ValueError("Invalid value for `scientific_name`, must not be `None`")  # noqa: E501

        self._scientific_name = scientific_name

    @property
    def label_name(self) -> str:
        """Gets the label_name of this Flor.


        :return: The label_name of this Flor.
        :rtype: str
        """
        return self._label_name

    @label_name.setter
    def label_name(self, label_name: str):
        """Sets the label_name of this Flor.


        :param label_name: The label_name of this Flor.
        :type label_name: str
        """
        if label_name is None:
            raise ValueError("Invalid value for `label_name`, must not be `None`")  # noqa: E501

        self._label_name = label_name

    @property
    def description(self) -> str:
        """Gets the description of this Flor.


        :return: The description of this Flor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Flor.


        :param description: The description of this Flor.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def min_height(self) -> float:
        """Gets the min_height of this Flor.


        :return: The min_height of this Flor.
        :rtype: float
        """
        return self._min_height

    @min_height.setter
    def min_height(self, min_height: float):
        """Sets the min_height of this Flor.


        :param min_height: The min_height of this Flor.
        :type min_height: float
        """
        if min_height is None:
            raise ValueError("Invalid value for `min_height`, must not be `None`")  # noqa: E501

        self._min_height = min_height

    @property
    def max_height(self) -> float:
        """Gets the max_height of this Flor.


        :return: The max_height of this Flor.
        :rtype: float
        """
        return self._max_height

    @max_height.setter
    def max_height(self, max_height: float):
        """Sets the max_height of this Flor.


        :param max_height: The max_height of this Flor.
        :type max_height: float
        """
        if max_height is None:
            raise ValueError("Invalid value for `max_height`, must not be `None`")  # noqa: E501

        self._max_height = max_height

    @property
    def more_info(self) -> str:
        """Gets the more_info of this Flor.


        :return: The more_info of this Flor.
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info: str):
        """Sets the more_info of this Flor.


        :param more_info: The more_info of this Flor.
        :type more_info: str
        """
        if more_info is None:
            raise ValueError("Invalid value for `more_info`, must not be `None`")  # noqa: E501

        self._more_info = more_info
